// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Company {
  id            String         @id @default(uuid())
  name          String
  address       String
  imageUrl      String
  category      String
  services      Service[]
  bookings      Booking[]
  professionals Professional[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Service {
  id                   String                @id @default(uuid())
  name                 String
  price                Decimal               @db.Decimal(10, 2)
  company              Company               @relation(fields: [companyId], references: [id])
  companyId            String
  description          String
  bookings             Booking[]
  imageUrl             String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  serviceProfessionals ServiceProfessional[]
}

model Professional {
  id        String                @id @default(uuid())
  name      String
  company   Company               @relation(fields: [companyId], references: [id])
  role      String
  companyId String
  services  ServiceProfessional[]
  bookings  Booking[]
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
}

model ServiceProfessional {
  serviceId      String
  professionalId String
  service        Service      @relation(fields: [serviceId], references: [id])
  professional   Professional @relation(fields: [professionalId], references: [id])

  @@id([serviceId, professionalId])
}

model Booking {
  id             String        @id @default(uuid())
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  service        Service       @relation(fields: [serviceId], references: [id])
  serviceId      String
  date           DateTime
  company        Company       @relation(fields: [companyId], references: [id])
  companyId      String
  professional   Professional? @relation(fields: [professionalId], references: [id])
  professionalId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
